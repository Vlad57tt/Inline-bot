from aiogram import Router, F, types

import hashlib
#from bot.keyboards import start_menu, url_button
import os
from dotenv import load_dotenv
from bot.utills import create_invoice, getexchange, creat_invoice, got_status

load_dotenv()
router = Router()

def is_number(string):
    try:
        int(string)
        return True
    except ValueError:
        return False


@router.inline_query()
async def inline_query_handler(inline_query: types.InlineQuery):
    try:
        query_parts = inline_query.query.split(maxsplit=2)  # ['method', 'value']
        if len(query_parts) == 2 and query_parts[0].lower() in ['cryptobot','cb', 'crystal', 'cr', 'crystalpay']:
            payment_method = query_parts[0].lower()
            amount = query_parts[1]
            if payment_method in ['cryptobot','cb'] and is_number(amount):
                rates = await getexchange()
                usdt_amount = float(amount) / float(rates)
                total_usdt = usdt_amount * (1 + 15 / 100)
                invoice_link, invoice_id = await create_invoice(price=total_usdt)
                reply_text = f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: Cryptobot\nüí≤–°—É–º–º–∞:  {amount}‚ÇΩ\n‚è∞–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\nID: <code>{invoice_id}</code>\nüí∏–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n <a href='{invoice_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ!</a> "
            elif payment_method in ['crystal', 'cr', 'crystalpay'] and is_number(amount):
                total_amount = float(amount) * (1 + 5 / 100)
                invoice_link, invoice_id = await creat_invoice(total_amount)
                if invoice_link and invoice_id != False:
                    reply_text = f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: CrystalPay\nüí≤–°—É–º–º–∞: {amount}‚ÇΩ\n‚è∞–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\nID: <code>{invoice_id}</code>\nüí∏–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n <a href='{invoice_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ!</a> "
                else:
                    reply_text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!'
            input_content = types.InputTextMessageContent(message_text=reply_text, parse_mode="HTML")

            result_id = hashlib.md5(reply_text.encode()).hexdigest()
            item = types.InlineQueryResultArticle(
                id=result_id,
                title='–°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç',
                input_message_content=input_content
            )
            await inline_query.answer(results=[item], cache_time=1)
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É,
            # –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            instruction_content = types.InputTextMessageContent(
                message_text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: @bot {pay_method} {—Å—É–º–º–∞}, —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ pay_method –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –≤ –±–æ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ–º–æ—â—å"
            )
            result_id = hashlib.md5(instruction_content.message_text.encode()).hexdigest()
            instruction_item = types.InlineQueryResultArticle(
                id=result_id,
                title='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–æ–≤',
                input_message_content=instruction_content
            )
            await inline_query.answer(results=[instruction_item], cache_time=1)
    except Exception as e:
        raise e


